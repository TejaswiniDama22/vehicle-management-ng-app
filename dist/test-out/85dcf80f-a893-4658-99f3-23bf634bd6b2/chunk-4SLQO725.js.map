{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\app\\components\\login-register\\login-register.component.html", "angular:jit:style:src\\app\\app\\components\\login-register\\login-register.component.css", "src/app/app/components/login-register/login-register.component.ts"],
  "sourcesContent": ["\r\n<div class=\"container\">\r\n  <div class=\"card\">\r\n    <h2 *ngIf=\"!showRegister\">Login</h2>\r\n    <h2 *ngIf=\"showRegister\">Register</h2>\r\n\r\n    <!-- Login Form -->\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" *ngIf=\"!showRegister\">\r\n      <input formControlName=\"email\" type=\"email\" placeholder=\"Email\" />\r\n      <div class=\"error\" *ngIf=\"loginForm.get('email')?.touched && loginForm.get('email')?.invalid\">\r\n        <small *ngIf=\"loginForm.get('email')?.errors?.['required']\">Email is required.</small>\r\n        <small *ngIf=\"loginForm.get('email')?.errors?.['email']\">Invalid email format.</small>\r\n      </div>\r\n\r\n      <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" />\r\n      <div class=\"error\" *ngIf=\"loginForm.get('password')?.touched && loginForm.get('password')?.invalid\">\r\n        <small *ngIf=\"loginForm.get('password')?.errors?.['required']\">Password is required.</small>\r\n      </div>\r\n\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n\r\n    <!-- Register Form -->\r\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\" *ngIf=\"showRegister\">\r\n      <input formControlName=\"name\" type=\"text\" placeholder=\"Name\" />\r\n      <div class=\"error\" *ngIf=\"registerForm.get('name')?.touched && registerForm.get('name')?.invalid\">\r\n        <small>Name is required.</small>\r\n      </div>\r\n\r\n      <input formControlName=\"email\" type=\"email\" placeholder=\"Email\" />\r\n      <div class=\"error\" *ngIf=\"registerForm.get('email')?.touched && registerForm.get('email')?.invalid\">\r\n        <small *ngIf=\"registerForm.get('email')?.errors?.['required']\">Email is required.</small>\r\n        <small *ngIf=\"registerForm.get('email')?.errors?.['email']\">Invalid email format.</small>\r\n      </div>\r\n\r\n      <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" />\r\n      <div class=\"error\" *ngIf=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\">\r\n        <small *ngIf=\"registerForm.get('password')?.errors?.['required']\">Password is required.</small>\r\n        <small *ngIf=\"registerForm.get('password')?.errors?.['minlength']\">Password must be at least 8 characters.</small>\r\n      </div>\r\n\r\n      <button type=\"submit\">Register</button>\r\n    </form>\r\n\r\n    <p class=\"toggle\" (click)=\"toggleRegister()\">\r\n      {{ showRegister ? 'Already registered? Login' : 'New user? Register here' }}\r\n    </p>\r\n\r\n    <p class=\"message\">{{ message }}</p>\r\n  </div>\r\n</div>\r\n", "/* src/app/app/components/login-register/login-register.component.css */\n.container {\n  display: flex;\n  justify-content: center;\n  margin-top: 180px;\n}\n.card {\n  background: #f5f5f5;\n  padding: 30px;\n  border-radius: 10px;\n  width: 350px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\ninput {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 15px;\n  border-radius: 6px;\n  border: 1px solid #ccc;\n}\nbutton {\n  width: 100%;\n  background: #28a745;\n  color: white;\n  padding: 10px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n}\nbutton:hover {\n  background: #218838;\n}\n.toggle {\n  color: #007bff;\n  cursor: pointer;\n  text-align: center;\n  margin-top: 10px;\n}\n.error small {\n  color: red;\n  font-size: 12px;\n}\n.message {\n  margin-top: 10px;\n  font-weight: bold;\n  color: darkred;\n}\n/*# sourceMappingURL=login-register.component.css.map */\n", "import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user';\r\n\r\n@Component({\r\n  selector: 'app-login-register',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './login-register.component.html',\r\n  styleUrls: ['./login-register.component.css']\r\n})\r\nexport class LoginRegisterComponent {\r\n  loginForm: FormGroup;\r\n  registerForm: FormGroup;\r\n  message = '';\r\n  showRegister = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UserService,\r\n    private router: Router\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required]\r\n    });\r\n\r\n    this.registerForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8)]]\r\n    });\r\n  }\r\n\r\n  toggleRegister() {\r\n    this.showRegister = !this.showRegister;\r\n    this.message = '';\r\n  }\r\n\r\n  login() {\r\n    if (this.loginForm.valid) {\r\n      const { email, password } = this.loginForm.value;\r\n      this.userService.login(email, password).subscribe({\r\n        next: (res) => {\r\n          const user = res.data;\r\n          localStorage.setItem('userId', user.userId); // ✅ Save user ID\r\n          this.message = res.message;\r\n          this.router.navigate(['/dashboard']); // ✅ Go to dashboard\r\n        },\r\n        error: (err) => {\r\n          this.message =\r\n            err.status === 404 || err.status === 401\r\n              ? 'Invalid email or password'\r\n              : 'Login failed. Try again.';\r\n        }\r\n      });\r\n    } else {\r\n      this.message = 'Please fill in all fields.';\r\n    }\r\n  }\r\n\r\n  register() {\r\n    if (this.registerForm.valid) {\r\n      this.userService.register(this.registerForm.value).subscribe({\r\n        next: (res) => {\r\n          this.message = res.message;\r\n          this.toggleRegister(); // Back to login\r\n        },\r\n        error: (err) => {\r\n          this.message = err.status === 409\r\n            ? 'Email already registered'\r\n            : 'Registration failed';\r\n        }\r\n      });\r\n    } else {\r\n      this.message = 'Please fix the validation errors.';\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,iCAAA;AAAA;AAAA,IAAAD,oCAAA;AAAA;AAAA;;;ICaa;;;;;;;AAbb;AACA;AACA;AACA;AACA;AASO,IAAM,yBAAN,MAAME,wBAAsB;MAOvB;MACA;MACA;MARV;MACA;MACA,UAAU;MACV,eAAe;MAEf,YACU,IACA,aACA,QAAc;AAFd,aAAA,KAAA;AACA,aAAA,cAAA;AACA,aAAA,SAAA;AAER,aAAK,YAAY,KAAK,GAAG,MAAM;UAC7B,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,KAAK,CAAC;UACnD,UAAU,CAAC,IAAI,WAAW,QAAQ;SACnC;AAED,aAAK,eAAe,KAAK,GAAG,MAAM;UAChC,MAAM,CAAC,IAAI,WAAW,QAAQ;UAC9B,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,KAAK,CAAC;UACnD,UAAU,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;SAC9D;MACH;MAEA,iBAAc;AACZ,aAAK,eAAe,CAAC,KAAK;AAC1B,aAAK,UAAU;MACjB;MAEA,QAAK;AACH,YAAI,KAAK,UAAU,OAAO;AACxB,gBAAM,EAAE,OAAO,SAAQ,IAAK,KAAK,UAAU;AAC3C,eAAK,YAAY,MAAM,OAAO,QAAQ,EAAE,UAAU;YAChD,MAAM,CAAC,QAAO;AACZ,oBAAM,OAAO,IAAI;AACjB,2BAAa,QAAQ,UAAU,KAAK,MAAM;AAC1C,mBAAK,UAAU,IAAI;AACnB,mBAAK,OAAO,SAAS,CAAC,YAAY,CAAC;YACrC;YACA,OAAO,CAAC,QAAO;AACb,mBAAK,UACH,IAAI,WAAW,OAAO,IAAI,WAAW,MACjC,8BACA;YACR;WACD;QACH,OAAO;AACL,eAAK,UAAU;QACjB;MACF;MAEA,WAAQ;AACN,YAAI,KAAK,aAAa,OAAO;AAC3B,eAAK,YAAY,SAAS,KAAK,aAAa,KAAK,EAAE,UAAU;YAC3D,MAAM,CAAC,QAAO;AACZ,mBAAK,UAAU,IAAI;AACnB,mBAAK,eAAc;YACrB;YACA,OAAO,CAAC,QAAO;AACb,mBAAK,UAAU,IAAI,WAAW,MAC1B,6BACA;YACN;WACD;QACH,OAAO;AACL,eAAK,UAAU;QACjB;MACF;;;;;;;AAlEW,6BAAsB,WAAA;MAPlC,UAAU;QACT,UAAU;QACV,YAAY;QACZ,SAAS,CAAC,cAAc,mBAAmB;QAC3C,UAAA;;OAED;OACY,sBAAsB;;;",
  "names": ["login_register_component_default", "init_login_register_component", "LoginRegisterComponent"]
}
